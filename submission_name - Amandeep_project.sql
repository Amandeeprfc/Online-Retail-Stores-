/*

-----------------------------------------------------------------------------------------------------------------------------------
                                               Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			

-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/
-- Use Schema
use orders;

-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]

select * from online_customer;

SELECT
  CONCAT(
    (CASE WHEN CUSTOMER_GENDER = 'M' THEN 'Mr. ' ELSE 'Ms. ' END),
    UPPER(CUSTOMER_FNAME), ' ', UPPER(CUSTOMER_LNAME)
  ) AS FullName,
 CUSTOMER_EMAIL,
  CUSTOMER_CREATION_DATE,
  CASE
    WHEN EXTRACT(YEAR FROM CUSTOMER_CREATION_DATE) < 2005 THEN 'CATEGORY A'
    WHEN EXTRACT(YEAR FROM CUSTOMER_CREATION_DATE) >= 2005 AND EXTRACT(YEAR FROM CUSTOMER_CREATION_DATE) < 2011 THEN 'CATEGORY B'
    ELSE 'CATEGORY C'
  END AS CustomerCategory
FROM Online_Customer;


-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    
Select p.PRODUCT_ID, 
p.PRODUCT_DESC, 
p.PRODUCT_QUANTITY_AVAIL, 
p.PRODUCT_PRICE,
(P.PRODUCT_QUANTITY_AVAIL * P.PRODUCT_PRICE) AS INVENTORY_VALUE,
    CASE 
        WHEN P.PRODUCT_PRICE > 20000 THEN P.PRODUCT_PRICE * 0.80
        WHEN P.PRODUCT_PRICE > 10000 AND P.PRODUCT_PRICE < 20000 THEN P.PRODUCT_PRICE * 0.85
        WHEN P.PRODUCT_PRICE <= 10000 THEN P.PRODUCT_PRICE * 0.90
        ELSE P.PRODUCT_PRICE * 0.90
    END AS NEW_PRICE
FROM 
  product p 
LEFT JOIN 
   order_items OI ON p.PRODUCT_ID = OI.PRODUCT_ID
WHERE 
    OI.PRODUCT_ID IS NULL
ORDER BY 
    INVENTORY_VALUE DESC;
    

-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
    
SELECT pc.PRODUCT_CLASS_CODE,
       pc.PRODUCT_CLASS_DESC,
       COUNT(p.PRODUCT_ID) AS Product_count,
       SUM(p.PRODUCT_QUANTITY_AVAIL * p.PRODUCT_PRICE) AS inventory_value
FROM product p
INNER JOIN product_class pc ON p.PRODUCT_CLASS_CODE = pc.PRODUCT_CLASS_CODE
GROUP BY pc.PRODUCT_CLASS_CODE, pc.PRODUCT_CLASS_DESC
HAVING SUM(p.PRODUCT_QUANTITY_AVAIL * p.PRODUCT_PRICE) > 100000  -- Filter for inventory value > 100,000
ORDER BY inventory_value DESC;

-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]

SELECT OC.CUSTOMER_ID, 
Concat(OC.CUSTOMER_FNAME,' ', OC.CUSTOMER_LNAME) AS FULL_NAME, 
OC.CUSTOMER_EMAIL,
OC.CUSTOMER_PHONE,
A.COUNTRY
FROM online_customer OC 
JOIN address A ON OC.ADDRESS_ID = A.ADDRESS_ID
WHERE OC.CUSTOMER_ID IN (Select oh.customer_id from order_header oh where ORDER_STATUS = 'Cancelled');

select * from order_header where ORDER_STATUS = 'Cancelled'; 
   
-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]

SELECT S.SHIPPER_NAME, 
A.CITY, 
count(DISTINCT OC.CUSTOMER_ID) AS NUMBER_OF_CUSTOMERS,
count(OH.ORDER_ID) AS NUMBER_OF_CONSIGNMENTS
from shipper S JOIN ORDER_HEADER OH ON S.SHIPPER_ID = OH.SHIPPER_ID 
JOIN online_customer OC ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
JOIN address A ON A.ADDRESS_ID = OC.ADDRESS_ID
WHERE S.SHIPPER_NAME = 'DHL'
GROUP BY S.SHIPPER_NAME, A.CITY; 


-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]

SELECT OC.CUSTOMER_ID, 
concat(OC.CUSTOMER_FNAME, ' ', OC.CUSTOMER_LNAME) AS FULL_NAME,
SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY,
SUM(P.PRODUCT_PRICE * OI.PRODUCT_QUANTITY) AS TOTAL_VALUE
FROM ONLINE_CUSTOMER OC 
JOIN ORDER_HEADER OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
JOIN order_items OI ON OH.ORDER_ID = OH.ORDER_ID
JOIN product P ON OI.PRODUCT_ID = P.PRODUCT_ID
WHERE OH.PAYMENT_MODE = 'Cash'
AND OC.CUSTOMER_LNAME LIKE 'G%'
GROUP BY OC.CUSTOMER_ID;
    
-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
 
SELECT OI.ORDER_ID, max(P.LEN * P.WIDTH * P.HEIGHT) AS BIGGEST_VOLUME
FROM ORDER_ITEMS OI
JOIN PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
JOIN CARTON C ON P.LEN <= C.LEN AND P.WIDTH <= C.WIDTH AND P.HEIGHT <= C.HEIGHT
WHERE C.CARTON_ID = 10
GROUP BY OI.ORDER_ID
ORDER BY BIGGEST_VOLUME DESC
LIMIT 1;


-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)

SELECT PRODUCT_ID,
	   PRODUCT_DESC,
       TOT_QTY AS QTY_SOLD,
       PRODUCT_QUANTITY_AVAIL,
    CASE
        WHEN PRODUCT_CLASS_DESC IN ('ELECTRONICS', 'COMPUTER') THEN
	CASE
        WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.1 THEN "LOW INVENTORY, NEED TO ADD INVENTORY"
		WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.5 THEN "MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY"
        WHEN S.TOT_QTY IS NULL THEN "NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY"
	    ELSE "SUFFICIENT INVENTORY"
	END
        WHEN PRODUCT_CLASS_DESC IN ('MOBILES', 'WATCHES') THEN
	CASE
         WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.2 THEN "LOW INVENTORY, NEED TO ADD INVENTORY"
         WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.6 THEN "MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY"
         WHEN S.TOT_QTY IS NULL THEN "NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY"
         ELSE "SUFFICIENT INVENTORY"
	END
	    ELSE
    CASE
         WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.3 THEN "LOW INVENTORY, NEED TO ADD INVENTORY"
         WHEN (PRODUCT_QUANTITY_AVAIL / S.TOT_QTY) < 0.7 THEN "MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY"
         WHEN S.TOT_QTY IS NULL THEN "NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY"
         ELSE "SUFFICIENT INVENTORY"
        END
    END AS INVENTORY_STATUS
FROM (
    SELECT P.PRODUCT_ID
 , P.PRODUCT_DESC
 , PC.PRODUCT_CLASS_DESC
 , P.PRODUCT_QUANTITY_AVAIL
 , SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY
 FROM PRODUCT P
 LEFT JOIN ORDER_ITEMS OI ON OI.PRODUCT_ID = P.PRODUCT_ID
 LEFT JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE =
PC.PRODUCT_CLASS_CODE
 GROUP BY P.PRODUCT_ID
 , P.PRODUCT_DESC ,
 PC.PRODUCT_CLASS_DESC,
 P.PRODUCT_QUANTITY_AVAIL
) S;

    
-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    
SELECT S.ORDER_ID,
    S.PRODUCT_ID,
    S.PRODUCT_DESC,
    S.TOT_QTY
FROM (
    SELECT 
        OI.ORDER_ID,
        P.PRODUCT_ID,
        P.PRODUCT_DESC,
        SUM(PRODUCT_QUANTITY) AS TOT_QTY
    FROM ORDER_ITEMS OI
    INNER JOIN PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
    WHERE OI.ORDER_ID IN (
            SELECT OI.ORDER_ID
            FROM ORDER_ITEMS OI
            JOIN ORDER_HEADER OH ON OI.ORDER_ID = OH.ORDER_ID
            JOIN ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
            JOIN ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
            WHERE OI.PRODUCT_ID = 201 AND OH.ORDER_STATUS = 'SHIPPED' AND A.CITY NOT IN ('BANGALORE', 'NEW DELHI')
        )
        AND P.PRODUCT_ID != 201
    GROUP BY OI.ORDER_ID, P.PRODUCT_ID, PRODUCT_DESC
) S 
ORDER BY TOT_QTY DESC;
 
-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVENAND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]
 
SELECT OH.ORDER_ID, 
OC.CUSTOMER_ID, 
CONCAT ( OC.CUSTOMER_FNAME ,' ' , OC.CUSTOMER_LNAME ) AS FULLNAME, 
SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY 
FROM ONLINE_CUSTOMER OC 
INNER JOIN ORDER_HEADER OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID 
INNER JOIN ORDER_ITEMS OI ON OH.ORDER_ID = OI.ORDER_ID 
INNER JOIN ADDRESS A ON A.ADDRESS_ID = OC.ADDRESS_ID 
WHERE MOD(OH.ORDER_ID, 2) = 0 AND OH.ORDER_STATUS = 'SHIPPED' AND A.PINCODE NOT LIKE "5%" 
GROUP BY OH.ORDER_ID , OC.CUSTOMER_ID , FULLNAME; 
